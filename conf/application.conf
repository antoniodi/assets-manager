# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile

play.http.context = "/ms-base"
play.i18n.langs=["en"]

## Secret key
# http://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
# The secret key is used to sign Play's session cookie.
# This must be changed for production, but we don't recommend you change it in this file.
play.http.secret.key = ":Bpeeh=V[9oe]usPKypIvzdQ]qZz_RsU8KXOpfU^xzoyG?njtXcnk9[^t7Kg3gA="

## Evolutions
# https://www.playframework.com/documentation/latest/Evolutions
# ~~~~~
# Evolutions allows database scripts to be automatically run on startup in dev mode
# for database migrations. You must enable this by adding to build.sbt:
#
# libraryDependencies += evolutions
#
play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
  db.default.enabled = true
  autoApply = true
  autoApplyDowns = true
}

## Database Connection Pool
# https://www.playframework.com/documentation/latest/SettingsJDBC
# ~~~~~
# Play doesn't require a JDBC database to run, but you can easily enable one.
#
# libraryDependencies += jdbc
#
play.db {
  # The combination of these two settings results in "db.default" as the
  # default JDBC pool:
  #config = "db"
  #default = "default"

  # Play uses HikariCP as the default connection pool.  You can override
  # settings by changing the prototype:
  prototype {
    # Sets a fixed JDBC connection pool size of 50
    #hikaricp.minimumIdle = 50
    #hikaricp.maximumPoolSize = 50
  }
}

## JDBC Datasource
# https://www.playframework.com/documentation/latest/JavaDatabase
# https://www.playframework.com/documentation/latest/ScalaDatabase
# ~~~~~
# Once JDBC datasource is set up, you can work with several different
# database options:
#
# Slick (Scala preferred option): https://www.playframework.com/documentation/latest/PlaySlick
# JPA (Java preferred option): https://playframework.com/documentation/latest/JavaJPA
# EBean: https://playframework.com/documentation/latest/JavaEbean
# Anorm: https://www.playframework.com/documentation/latest/ScalaAnorm
#
slick.dbs {
  # You can declare as many datasources as you want.
  # By convention, the default datasource is named `default`

    postgres {
      profile = "slick.jdbc.PostgresProfile$"
      db {
		host = localhost
		port = 5432
        driver = org.postgresql.Driver
        url = "jdbc:postgresql://localhost:5432/postgres"
        username = "postgres"
        password = "admin"
        user = "postgres"
        maxConnections = 1
        numThreads = 1
        connectionTimeout = 30 seconds
        keepAliveConnection = true
        queueSize = 2000
      }
    }

    postgres-read-only {
      profile = "slick.jdbc.PostgresProfile$"
      db {
        host = localhost
        port = 5432
        driver = org.postgresql.Driver
        url = "jdbc:postgresql://localhost:5432/postgres"
        username = "postgres"
        user = "postgres"
        password = "admin"
        maxConnections = 1
        numThreads = 1
        readOnly= true
        connectionTimeout = 30 seconds
        keepAliveConnection = true
        queueSize = 2000
      }
    }

    #slick.dbs.default.profile="slick.jdbc.H2Profile$"
    #slick.dbs.default.db.profile="org.h2.Driver"
    #slick.dbs.default.db.url="jdbc:h2:mem:play;DB_CLOSE_DELAY=-1"

    default {
      profile = "slick.jdbc.H2Profile$"
      db {
        driver = "org.h2.Driver"
        url = "jdbc:h2:mem:play;MODE=PostgreSQL;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=FALSE;DB_CLOSE_ON_EXIT=FALSE;"
        user = "sa"
        password = ""
      }
    }

  # You can turn on SQL logging for any datasource
  # https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
  #default.logSql=true
}

## Filters
# https://www.playframework.com/documentation/latest/Filters
# ~~~~~
# There are a number of built-in filters that can be enabled and configured
# to give Play greater security.  You must enable this by adding to build.sbt:
#
# libraryDependencies += filters
#
play.filters {

  enabled += "play.filters.gzip.GzipFilter"

  # Allowed hosts filter configuration
  hosts {

    # A list of valid hosts (e.g. "example.com") or suffixes of valid hosts (e.g. ".example.com")
    # Note that ".example.com" will match example.com and any subdomain of example.com, with or without a trailing dot.
    # "." matches all domains, and "" matches an empty or nonexistent host.
    allowed = ["localhost", ".local"]
  }

  # GZip filter configuration
  gzip {

    # The buffer size to use for gzipped bytes
    bufferSize = 8k

    # The maximum amount of content to buffer for gzipping in order to calculate the content length before falling back
    # to chunked encoding.
    chunkedThreshold = 100k
  }

  cors {
    # The path prefixes to filter.
    pathPrefixes = ["/"]

    # The allowed origins. If null, all origins are allowed.
    allowedOrigins = null

    # The allowed HTTP methods. If null, all methods are allowed
    allowedHttpMethods = ["GET", "POST", "PUT", "DELETE"]

    # The allowed HTTP headers. If null, all headers are allowed.
    allowedHttpHeaders = null

    # The exposed headers
    exposedHeaders = []
  }
}

play.http.parser.maxMemoryBuffer=100MB
play.http.parser.maxDiskBuffer = 100MB
parsers.anyContent.maxLength = 100MB